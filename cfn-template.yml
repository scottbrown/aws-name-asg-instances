---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Adds Name tags to EC2 instances in an ASG"

Resources:
  CloudWatchEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Names EC2 instances in an ASG based on tags"
      State: ENABLED
      Targets:
        - Id: lambda-name-instance
          Arn: !GetAtt LambdaFunction.Arn
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance Launch Successful"
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CloudWatchEventRule.Arn
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          ec2 = boto3.client('ec2')

          class LambdaException(Exception):
            pass

          def verify_instance_exists(instance_id):
            result = ec2.describe_instance_status(InstanceIds=[instance_id], IncludeAllInstances=True)
            if 'InstanceStatuses' not in result:
              raise LambdaException("Result payload spec changed, aborting. Payload: {}".format(result))
            elif len(result['InstanceStatuses']) < 1:
              raise LambdaException("Instance not found: {}".format(instance_id))
            elif len(result['InstanceStatuses']) > 1:
              raise LambdaException("1+ instances found for instance {}.  Aborting to prevent damage".format(instance_id))

          def get_tags(instance_id):
            result = ec2.describe_tags(
              Filters=[{'Name': 'resource-id', 'Values': [instance_id]}])
            if 'Tags' not in result:
              raise LambdaException("Result payload spec changed, aborting. Payload: {}".format(result))
            return result['Tags']

          def assert_name_tag_not_set(instance_id, tag_list):
            tag = [i for i in tag_list if i['Key'] == 'Name' if i['Value'] != '']
            if len(tag):
              val = tag[0]['Value']
              raise LambdaException("Name tag already set to {} on instance {}".format(val, instance_id))

          def get_tag_value(tag_list, key):
            tag = [i for i in tag_list if i['Key'] == key if i['Value'] != '']
            if not tag:
              raise LambdaException("Tag {} not found in list {}".format(key, tag_list))
            return tag[0]['Value']

          def build_name(project, env, instance_id):
            id = instance_id.split('-')[1]  # strip the i-
            name = "-".join([project, env, id])
            return name[:255]   # tag values max out at 255 chars

          def name_instance(instance_id, name):
            tag = dict()
            tag['Key'] = 'Name'
            tag['Value'] = name

            result = ec2.create_tags(Resources=[instance_id], Tags=[tag])

            if result['ResponseMetadata']['HTTPStatusCode'] != 200:
              raise LambdaException("Tag creation failed.  Response: {}".format(result))
            else:
              print("SUCCESS: Tagging {} with name {}".format(instance_id, name))

          def lambda_handler(event, context):
            instance_id = event['detail']['EC2InstanceId']

            try:
              verify_instance_exists(instance_id)
              tag_list = get_tags(instance_id)

              assert_name_tag_not_set(instance_id, tag_list)

              project_tag = get_tag_value(tag_list, 'project')
              env_tag = get_tag_value(tag_list, 'environment')

              name = build_name(project_tag, env_tag, instance_id)
              name_instance(instance_id, name)
            except LambdaException as e:
              print("ERROR: {}".format(e.args[0]))
      Description: "Names EC2 instances in an ASG based on its tags"
      Handler: "index.lambda_handler"
      Role: !GetAtt IAMRole.Arn
      MemorySize: 128   # MB
      Runtime: "python3.6"
      Timeout: 60   # seconds
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/lambda/"
  AllowEC2NamingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "rw-add-ec2-tags"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DescribeTags"
              - "ec2:DescribeInstanceStatus"
            Resource: "*"
      Roles:
        - !Ref IAMRole
  AllowLambdaCloudwatchLogs:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "rw-cloudwatch-logs"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Roles:
        - !Ref IAMRole

